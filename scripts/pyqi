#!/usr/bin/env python

#-----------------------------------------------------------------------------
# Copyright (c) 2013, The BiPy Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#-----------------------------------------------------------------------------

__author__ = "Daniel McDonald"
__copyright__ = "Copyright 2013, The pyqi Project"
__credits__ = ["Greg Caporaso", "Daniel McDonald", "Doug Wendel",
               "Jai Ram Rideout"]
__license__ = "BSD"
__version__ = "0.1.0-dev"
__maintainer__ = "Daniel McDonald"
__email__ = "mcdonadt@colorado.edu"

from sys import argv, exit, stderr
from pyqi.core.interfaces.optparse import optparse_main, optparse_factory
import importlib
from os.path import basename, expanduser
from ConfigParser import SafeConfigParser

### we actually have some flexibility here to make the driver interface agnostic as well

# drop any path fluff
argv[0] = basename(argv[0])

# check if there is a configuration and load the cfg base
c = SafeConfigParser()
try:
    c.readfp(open(expanduser('~/.pyqi/%s' % argv[0])))
except IOError:
    CFG_BASE = 'pyqi.interfaces.optparse.config'
else:
    CFG_BASE = c.get('driver', 'cfg_base')

# load the cli configuration base
try:
    cfg = importlib.import_module(CFG_BASE)
except ImportError:
    stderr.write("Unable to read CFG_BASE: %s\n" % CFG_BASE)
    exit(1)

def usage(opts):
    """Modeled after git..."""
    # limit to a reasonable number of characters
    desc_limit = 70 

    print "usage: %s <command> [<args>]" % argv[0]
    print
    print "The currently available commands are:"
    
    for c in cfg.__all__:
        cmd_cfg = get_cmd_cfg(c, opts)
        desc = cmd_cfg.CommandConstructor.BriefDescription
        if len(desc) > desc_limit:
            print ''.join(['   ', c, '\t', desc[:desc_limit], '...'])
        else:
            print ''.join(['   ', c, '\t', desc])

    print
    print "See '%s help <command>' for more information on a specific command." % argv[0]
    exit(0)

def unknown_command(cmd):
    """Handle an unknown command"""
    stderr.write("Unknown command: %s\n" % cmd)
    exit(1)

def cmd_exists(cmd):
    """Check if a ``Command`` configuration exists"""
    if cmd in cfg.__all_lookup__:
        return True
    else:
        return False

def get_cmd_cfg(cmd, opts):
    """Get the configuration for a ``Command``"""
    try:
        cmd_cfg = importlib.import_module('.'.join([CFG_BASE, cmd]))
    except ImportError, e:
        stderr.write("Unable to import the command configuration for %s.\n" % cmd)
        if opts['--verbose']:
            stderr.write(str(e))
            stderr.write('\n')
        exit(1)
    return cmd_cfg

def get_cmd_obj(cmd, opts):
    """Get a ``Command`` object"""
    cmd_cfg = get_cmd_cfg(cmd, opts)
    return optparse_factory(cmd_cfg.CommandConstructor, cmd_cfg.usage_examples, 
                            cmd_cfg.inputs, cmd_cfg.outputs)

def help_(cmd, opts):
    """Dump the help for a ``Command``"""
    cmd_obj = get_cmd_obj(cmd, opts)
    optparse_main(cmd_obj, ['help','-h'])

if __name__ == '__main__':
    opts = {'--verbose':False}

    if len(argv) == 1:
        usage(opts)
    else:
        # check if argv[1] is one of our special options
        if argv[1] in opts:
            # and then handle it ungracefully
            if len(argv) == 2:
                opts['--verbose'] = True
                usage(opts)
            opts[argv[1]] = True
            argv.pop(1)
        cmd = argv[1]

    # if the command appears to be some cry for help
    if cmd in ['help','HELP','-?','-h']:
        if not len(argv) > 2:
            usage(opts)
        help_cmd = argv[2]

        # tears. 
        # .
        # this voodoo is to coerce optparse/argparse to dump the program name
        # at usage and examples correctly.
        argv[0] = ' '.join([argv[0], argv[2]])
        if cmd_exists(help_cmd):
            help_(help_cmd, opts)
        else:
            unknown_command(help_cmd)
    else:
        # see the note about crying about tears.
        argv[0] = ' '.join([argv[0], argv[1]])

    if not cmd_exists(cmd):
        unknown_command(cmd)

    cmd_obj = get_cmd_obj(cmd, opts)
    
    # and execute FTW
    optparse_main(cmd_obj, argv[1:])
