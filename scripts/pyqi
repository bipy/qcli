#!/usr/bin/env python

#-----------------------------------------------------------------------------
# Copyright (c) 2013, The BiPy Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#-----------------------------------------------------------------------------

__author__ = "Daniel McDonald"
__copyright__ = "Copyright 2013, The pyqi Project"
__credits__ = ["Greg Caporaso", "Daniel McDonald", "Doug Wendel",
               "Jai Ram Rideout"]
__license__ = "BSD"
__version__ = "0.1.0-dev"
__maintainer__ = "Daniel McDonald"
__email__ = "mcdonadt@colorado.edu"

import importlib
from sys import argv, exit, stderr
from pyqi.core.interface import get_command_names
from pyqi.core.interfaces.optparse import optparse_main, optparse_factory
from os.path import basename
from string import ljust 

### we actually have some flexibility here to make the driver interface agnostic as well

def usage(cmd_cfg_mod, command_names, verbose=False):
    """Modeled after git..."""
    # limit to a reasonable number of characters
    term_width = 80
    indent = 3

    cmds_and_desc = []
    for c in command_names:
        cmd_cfg = get_cmd_cfg(cmd_cfg_mod, c, verbose=verbose)
        desc = cmd_cfg.CommandConstructor.BriefDescription
        cmds_and_desc.append((c, desc))

    # determine widths
    max_cmd = max(map(lambda x: len(x[0]), cmds_and_desc))
    desc_limit = term_width - (indent + max_cmd + indent)
    cmd_end = indent + max_cmd + indent

    print "usage: %s <command> [<args>]" % argv[0]
    print
    print "The currently available commands are:"
    
    # format:
    # indent command indent description
    for c,desc in cmds_and_desc:
        cmd_formatted = ljust(''.join([' ' * indent, c]), cmd_end)
        print ''.join([cmd_formatted, desc[:desc_limit]])
    
    print
    print "See '%s help <command>' for more information on a specific command." % argv[0]
    exit(0)

def get_cmd_cfg(cmd_cfg_mod, cmd, verbose=False):
    """Get the configuration for a ``Command``"""
    try:
        cmd_cfg = importlib.import_module('.'.join([cmd_cfg_mod, cmd]))
    except ImportError, e:
        stderr.write("Unable to import the command configuration for %s.\n" % cmd)
        if verbose:
            stderr.write(str(e))
            stderr.write('\n')
        exit(1)
    return cmd_cfg

def get_cmd_obj(cmd_cfg_mod, cmd, verbose=False):
    """Get a ``Command`` object"""
    cmd_cfg = get_cmd_cfg(cmd_cfg_mod, cmd, verbose=verbose)
    return optparse_factory(cmd_cfg.CommandConstructor, cmd_cfg.usage_examples, 
                            cmd_cfg.inputs, cmd_cfg.outputs)

def help_(cmd_cfg_mod, cmd, verbose=False):
    """Dump the help for a ``Command``"""
    cmd_obj = get_cmd_obj(cmd_cfg_mod, cmd, verbose=verbose)
    optparse_main(cmd_obj, ['help', '-h'])


if __name__ == '__main__':
    driver_name = 'pyqi'
    cmd_cfg_mod = 'pyqi.interfaces.optparse.config'
    verbose = False

    if '--' in argv:
        stop_idx = argv.index('--')

        if '--driver-name' in argv[:stop_idx]:
            idx = argv.index('--driver-name')
            argv.pop(idx)
            driver_name = argv[idx]

            if driver_name.startswith('--'):
                stderr.write("pyqi driver option --driver-name requires a "
                             "value, e.g. --driver-name mydriver\n")
                exit(1)

            argv.pop(idx)
            stop_idx -= 2

        if '--command-config-module' in argv[:stop_idx]:
            idx = argv.index('--command-config-module')
            argv.pop(idx)
            cmd_cfg_mod = argv[idx]

            if cmd_cfg_mod.startswith('--'):
                stderr.write("pyqi driver option --command-config-module "
                             "requires a value, e.g. --command-config-module "
                             "my.command.config.module\n")
                exit(1)

            argv.pop(idx)
            stop_idx -= 2

        if '--verbose' in argv[:stop_idx]:
            verbose = True
            idx = argv.index('--verbose')
            argv.pop(idx)
            stop_idx -= 1

        if stop_idx != 1:
            # We're not pointing at a command name, so there must have been
            # other stuff that we didn't recognize.
            stderr.write("Unrecognized pyqi driver option(s): %s\n" %
                         ' '.join(argv[1:stop_idx]))
            exit(1)

        argv.pop(stop_idx)

    command_names = get_command_names(cmd_cfg_mod)

    if len(argv) == 1:
        argv[0] = driver_name
        usage(cmd_cfg_mod, command_names, verbose=verbose)
    else:
        cmd_name = argv[1]

        if cmd_name.lower() in ['help', '--help', '-?', '-h']:
            if not len(argv) > 2:
                argv[0] = driver_name
                usage(cmd_cfg_mod, command_names, verbose=verbose)

            help_cmd = argv[2]

            # tears. 
            # .
            # this voodoo is to coerce optparse/argparse to dump the program
            # name at usage and examples correctly.
            argv[0] = ' '.join([driver_name, help_cmd])
            help_(cmd_cfg_mod, help_cmd, verbose=verbose)
        else:
            # see the note about crying about tears.
            argv[0] = ' '.join([driver_name, cmd_name])
            cmd_obj = get_cmd_obj(cmd_cfg_mod, cmd_name, verbose=verbose)

            # execute FTW
            optparse_main(cmd_obj, argv[1:])
